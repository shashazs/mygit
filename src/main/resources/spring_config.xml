<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://mybatis.org/schema/mybatis-spring
       http://mybatis.org/schema/mybatis-spring.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 配置整合mybatis过程 -->
    <!-- 1.配置数据库相关参数properties的属性：${url} -->
    <!--<context:property-placeholder location="classpath:jdbc.properties"/>-->
    <!--ignore-unresolvable忽视掉，可以允许加载多个文件，order加载顺序-->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" order="1"/>
    <context:property-placeholder location="classpath:mail.properties" ignore-unresolvable="true" order="0"/>

    <!--连接邮箱-->
    <bean id="javamailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="username" value="${sendaccount}"/>
        <property name="password" value="${passsword}"/>
        <property name="host" value="${host}"/>
        <property name="port" value="${port}"/>
        <property name="protocol" value="smtp"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>

    <!-- 2.数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- c3p0连接池的私有属性 -->
        <property name="initialPoolSize" value="5"/>
        <property name="minPoolSize" value="5"/>
        <property name="acquireIncrement" value="5"/>
        <property name="maxPoolSize" value="30"/>
    </bean>

    <!-- 3.配置SqlSessionFactory对象 -->
    <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis_config.xml"/>

    </bean>
        <!-- 扫描pojo/model/bean包 使用别名 -->
       <!-- <property name="typeAliasesPackage" value="com.xd.bean"/>-->
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
       <!-- <property name="mapperLocations" value="classpath:mapper/*.xml"/>-->

   <!-- <mybatis:scan base-package="com.xd.dao"/>-->
    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.xd.dao"/>
    </bean>


    <!-- 扫描service包下所有使用注解的类型 -->
    <context:component-scan base-package="com.xd.service" />


    <!-- 配置事务管理器 -->
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置基于注解的声明式事务 -->
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
   <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--&lt;!&ndash;配置通知&ndash;&gt;
    <tx:advice id="tx" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="delete*" read-only="false" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="update*" read-only="false" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="add*" read-only="false" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>
    &lt;!&ndash;使用aop进行配置&ndash;&gt;
    <aop:config>
        &lt;!&ndash;配置切点&ndash;&gt;
        <aop:pointcut id="qd" expression="within(com.xd.service..*)"/>
        &lt;!&ndash; 配置切面&ndash;&gt;
        <aop:advisor pointcut-ref="qd" advice-ref="tx"/>
    </aop:config>-->

</beans>